libs <- c ("rvest", "rgdal", "raster", "dplyr", "tidyr", "readr", "purrr", "stringr", "yaml")
for (lib in libs[!sapply(libs, require, character.only=TRUE)]) {
    install.packages(lib, repos="https://cran.ism.ac.jp/", depend=TRUE)
    library (lib)
}
a <- list.files()
a
b <- read_html(a[1], encoding = "cp932")
b
b %>% html_nodes("//dem//gridenvelope")
b %>% html_nodes("//dem//gml:Gridenvelope")
b %>% html_nodes(xpath="//dem//gml:Gridenvelope")
b %>% html_nodes(xpath="//dem//gml:GridEnvelope")
b %>% html_nodes(xpath="//dem//gml:GridEnvelope")
b %>% html_nodes(xpath="//dem//gridenvelope")
b %>% html_nodes(xpath="//dem//gridenvelope//low")
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% parse_number()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ")
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ") %>% unlist8) 
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ") %>% unlist()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ") %>% unlist() %>% parse_double()
parse_double
str_split
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ", simplify =TRUE,n = 2) %>% unlist() %>% parse_double()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ", simplify =TRUE,n = 2) %>% parse_double()
b %>% html_nodes(xpath="//dem//gridenvelope") %>% html_text() %>% str_split(" ", simplify =TRUE,n = 2) %>% parse_double()
b %>% html_nodes(xpath="//dem//gridenvelope") %>% html_text()
q()
q()
library(fgdr)
library(raster)
#> Loading required package: sp
library(sf)
xmls <- list.files(pattern ="xmls$")
xmls
xmls <- list.files(., pattern ="xmls$")
list.files
xmls <- list.files(., pattern ="xml$")
xmls <- list.files(pattern ="xml$")
xmls
rs <- map(xmls, ~ read_fgd_dem(.x, resolution = 5, return_class="raster")
)
library(tidyverse)
rs <- map(xmls, ~ read_fgd_dem(.x, resolution = 5, return_class="raster"))
merge(rs[[1]], rs[[2]])
plot(merge(rs[[1]], rs[[2]]))
reduce(rs[1:2], merge)
plot(reduce(rs[1:2], merge))
plot(reduce(rs[1:10], merge))
length(rs)
plot(reduce(rs[1:30], merge))
plot(reduce(rs[1:20], merge))
plot(reduce(rs[1:15], merge))
rs[1:15]
plot(rs)
plot(reduce(rs[1:11], merge))
plot(reduce(rs[11:15], merge))
plot(reduce(rs[10:11], merge))
plot(reduce(rs[11:20], merge))
plot(reduce(rs[21:30], merge))
library(fs)
ps <- path("tmp", seq_along(rs), extent="tif")
ps
path
ps <- path("tmp", seq_along(rs), ext="tif")
ps
dir.create("tmp")
writeRaster
walk2(ps, rs, ~ writeRaster(.y, .x))
q()
source("./gsidem2raster.r", encoding = "UTF-8")
config <- read_yaml("config.yaml")
target_dir <- purrr::pluck(config, "TARGET_DIR")
output_dir <- purrr::pluck(config, "OUTPUT_DIR")
parameters <- purrr::pluck(config, "RASTER_PARAMETER")
ipaths <-
target_dir %>%
    list.files(full.names=TRUE, pattern="xml$") %>%
    keep( ~ str_detect(.x, "DEM5A"))
getwd()
setwd("..")
getwd()
source("./gsidem2raster.r", encoding = "UTF-8")
config <- read_yaml("config.yaml")
target_dir <- purrr::pluck(config, "TARGET_DIR")
output_dir <- purrr::pluck(config, "OUTPUT_DIR")
parameters <- purrr::pluck(config, "RASTER_PARAMETER")
ipaths <-
target_dir %>%
    list.files(full.names=TRUE, pattern="xml$") %>%
    keep( ~ str_detect(.x, "DEM5A"))
rs <- map(ipaths, ~ gsidem2raster(.x, crs = parameters$CRS, na_value=parameters$na_value))
ipaths
parameters$na_value
rs <- map(ipaths, ~ gsidem2raster(.x, crs = parameters$CRS, na_value=parameters$NA_VALUE))
rsm <- reduce(rs, merge)
plot(rsm)
q()
