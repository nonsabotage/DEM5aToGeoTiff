libs <- c ("rvest", "rgdal", "raster", "dplyr", "tidyr", "readr", "purrr", "stringr", "yaml")
for (lib in libs[!sapply(libs, require, character.only=TRUE)]) {
    install.packages(lib, repos="https://cran.ism.ac.jp/", depend=TRUE)
    library (lib)
}
a <- list.files()
a
b <- read_html(a[1], encoding = "cp932")
b
b %>% html_nodes("//dem//gridenvelope")
b %>% html_nodes("//dem//gml:Gridenvelope")
b %>% html_nodes(xpath="//dem//gml:Gridenvelope")
b %>% html_nodes(xpath="//dem//gml:GridEnvelope")
b %>% html_nodes(xpath="//dem//gml:GridEnvelope")
b %>% html_nodes(xpath="//dem//gridenvelope")
b %>% html_nodes(xpath="//dem//gridenvelope//low")
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% parse_number()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ")
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ") %>% unlist8) 
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ") %>% unlist()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ") %>% unlist() %>% parse_double()
parse_double
str_split
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ", simplify =TRUE,n = 2) %>% unlist() %>% parse_double()
b %>% html_nodes(xpath="//dem//gridenvelope//low") %>% html_text() %>% str_split(" ", simplify =TRUE,n = 2) %>% parse_double()
b %>% html_nodes(xpath="//dem//gridenvelope") %>% html_text() %>% str_split(" ", simplify =TRUE,n = 2) %>% parse_double()
b %>% html_nodes(xpath="//dem//gridenvelope") %>% html_text()
q()
q()
library(fgdr)
library(raster)
#> Loading required package: sp
library(sf)
xmls <- list.files(pattern ="xmls$")
xmls
xmls <- list.files(., pattern ="xmls$")
list.files
xmls <- list.files(., pattern ="xml$")
xmls <- list.files(pattern ="xml$")
xmls
rs <- map(xmls, ~ read_fgd_dem(.x, resolution = 5, return_class="raster")
)
library(tidyverse)
rs <- map(xmls, ~ read_fgd_dem(.x, resolution = 5, return_class="raster"))
merge(rs[[1]], rs[[2]])
plot(merge(rs[[1]], rs[[2]]))
reduce(rs[1:2], merge)
plot(reduce(rs[1:2], merge))
plot(reduce(rs[1:10], merge))
length(rs)
plot(reduce(rs[1:30], merge))
plot(reduce(rs[1:20], merge))
plot(reduce(rs[1:15], merge))
rs[1:15]
plot(rs)
plot(reduce(rs[1:11], merge))
plot(reduce(rs[11:15], merge))
plot(reduce(rs[10:11], merge))
plot(reduce(rs[11:20], merge))
plot(reduce(rs[21:30], merge))
library(fs)
ps <- path("tmp", seq_along(rs), extent="tif")
ps
path
ps <- path("tmp", seq_along(rs), ext="tif")
ps
dir.create("tmp")
writeRaster
walk2(ps, rs, ~ writeRaster(.y, .x))
q()
source("./gsidem2raster.r", encoding = "UTF-8")
config <- read_yaml("config.yaml")
target_dir <- purrr::pluck(config, "TARGET_DIR")
output_dir <- purrr::pluck(config, "OUTPUT_DIR")
parameters <- purrr::pluck(config, "RASTER_PARAMETER")
ipaths <-
target_dir %>%
    list.files(full.names=TRUE, pattern="xml$") %>%
    keep( ~ str_detect(.x, "DEM5A"))
getwd()
setwd("..")
getwd()
source("./gsidem2raster.r", encoding = "UTF-8")
config <- read_yaml("config.yaml")
target_dir <- purrr::pluck(config, "TARGET_DIR")
output_dir <- purrr::pluck(config, "OUTPUT_DIR")
parameters <- purrr::pluck(config, "RASTER_PARAMETER")
ipaths <-
target_dir %>%
    list.files(full.names=TRUE, pattern="xml$") %>%
    keep( ~ str_detect(.x, "DEM5A"))
rs <- map(ipaths, ~ gsidem2raster(.x, crs = parameters$CRS, na_value=parameters$na_value))
ipaths
parameters$na_value
rs <- map(ipaths, ~ gsidem2raster(.x, crs = parameters$CRS, na_value=parameters$NA_VALUE))
rsm <- reduce(rs, merge)
plot(rsm)
q()
# + --------------------------------------------------------------------------- +
# 基盤地図情報5mメッシュをGeoTiff形式に変換する
# Rでgrdファイルに書き出した後に, gdal_translateでgeotiffファイルに変換
# + --------------------------------------------------------------------------- +
libs <- c ("xml2", "rgdal", "raster", "dplyr", "tidyr", "readr", "purrr", "stringr", "yaml")
for (lib in libs[!sapply(libs, require, character.only=TRUE)]) {
    install.packages(lib, repos="https://cran.ism.ac.jp/", depend=TRUE)
    library (lib)
}
gsidem2raster <- function (ipath, crs, na_value) {
    coverage <-
        ipath %>%
        read_xml() %>%
        xml_find_all("/d1:Dataset/d1:DEM/d1:coverage")
    boundedby <-
        coverage %>%
        xml_find_all("./gml:boundedBy/gml:Envelope") %>%
        xml_children() %>%
        xml_text() %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        set_names(c("lower", "upper")) %>%
        lapply(set_names, c ("y", "x"))
    sp <-
        coverage %>%
        xml_find_all("./gml:coverageFunction/gml:GridFunction/gml:startPoint") %>%
        xml_text() %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        lapply(setNames, c ("x", "y")) %>%
        unlist()
    tuplelist <-
        coverage %>%
        xml_find_all("./gml:rangeSet/gml:DataBlock/gml:tupleList") %>%
        xml_text() %>%
        read_csv(col_names=c("type", "val"), col_types="cd")
    gridenvelope <-
    coverage %>%
        xml_find_all("./gml:gridDomain/gml:Grid/gml:limits/gml:GridEnvelope") %>%
    xml_children() %>%
    xml_text() %>%
    str_split(" ") %>%
    lapply(parse_integer) %>%
    set_names(c("low", "high")) %>%
    lapply(set_names, c("x", "y"))
    grid_size_x <- length(gridenvelope$low["x"]:gridenvelope$high["x"])
    grid_size_y <- length(gridenvelope$low["y"]:gridenvelope$high["y"])
    vals <- numeric(grid_size_x * grid_size_y) + na_value
    vals[sp["x"] + sp["y"] * grid_size_x + seq_alog(tuplelist$val)] <- tuplelist$val
    vals[abs(vals - na_value) < .Machine$double.eps]  <- NA
    rst  <- raster(xmn = boundedby$lower["x"],
                   xmx = boundedby$upper["x"],
                   ymn = boundedby$lower["y"],
                   ymx = boundedby$upper["y"],
                   nrows = grid_size_y,
                   ncols = grid_size_x,
                   crs = crs,
                   vals = vals)
    rst
}
source("./gsidem2raster.r", encoding = "UTF-8")
source("./util.r", encoding = "UTF-8")
config <- read_yaml("config.yaml")
target_dir <- purrr::pluck(config, "TARGET_DIR")
output_dir <- purrr::pluck(config, "OUTPUT_DIR")
parameters <- purrr::pluck(config, "RASTER_PARAMETER")
ipaths <-
target_dir %>%
    list.files(full.names=TRUE, pattern="xml$") %>%
    keep( ~ str_detect(.x, "DEM5A"))
for (ipath in ipaths) {
    rst <- gsidem2raster(ipath, crs = parameters$CRS, na_value = parameters$NA_VALUE)
    values(rst) <- ifelse(is.na(values(rst)), parameters$NA_VALUE, values(rst))
    opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
    writeRasterGrd(rst, opath, parameters)
}
source("./gsidem2raster.r", encoding = "UTF-8")
source("./util.r", encoding = "UTF-8")
config <- read_yaml("config.yaml")
target_dir <- purrr::pluck(config, "TARGET_DIR")
output_dir <- purrr::pluck(config, "OUTPUT_DIR")
parameters <- purrr::pluck(config, "RASTER_PARAMETER")
ipaths <-
target_dir %>%
    list.files(full.names=TRUE, pattern="xml$") %>%
    keep( ~ str_detect(.x, "DEM5A"))
for (ipath in ipaths) {
    rst <- gsidem2raster(ipath, crs = parameters$CRS, na_value = parameters$NA_VALUE)
    values(rst) <- ifelse(is.na(values(rst)), parameters$NA_VALUE, values(rst))
    opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
    writeRasterGrd(rst, opath, parameters)
}
q()
