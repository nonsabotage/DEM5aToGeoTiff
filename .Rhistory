        read_html(ipath, encoding="cp932") %>%
        html_nodes(xpath="//dem//coverage")
    boundedby <-
        coverage %>%
        html_nodes(xpath="//coverage//boundedby//envelope") %>%
        html_children %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        "names<-"(c("lower", "upper")) %>%
        lapply(setNames, c ("x", "y"))
    sp <-
        coverage %>%
        html_nodes(xpath="//coverage//coveragefunction//gridfunction//startpoint") %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        lapply(setNames, c ("x", "y")) %>%
        unlist
    tuplelist <-
        coverage %>%
        html_nodes(xpath="//coverage//rangeset//datablock//tuplelist") %>%
        html_text %>%
        read_csv(col_names=c("type", "val"), col_types="cd")
    vals <- tuplelist$val
    vals <- c (rep (p$NA_VALUE, length=sp["x"] + sp["y"] * p$MESH_SIZE_X), vals)
    vals <- c (vals, rep (p$NA_VALUE, length=p$MESH_SIZE_X * p$MESH_SIZE_Y - length(vals)))
    browser()
    rst  <- raster(xmn=boundedby$lower["x"],
                   xmx=boundedby$upper["x"],
                   ymn=boundedby$lower["y"],
                   ymx=boundedby$upper["y"],
                   nrows=p$MESH_SIZE_Y,
                   ncols=p$MESH_SIZE_X,
                   crs=p$CRS)
    values(rst) <- vals
    rst[abs(rst - p$NA_VALUE) <= 1.] <- p$NA_VALUE
    rst
}
writeRasterGrd <- function (r, opath, p) {
    vmat <- matrix(values(r), nrow=p$MESH_SIZE_Y, ncol=p$MESH_SIZE_X, byrow=TRUE)
    con  <- file(opath, open="wb")
    cat (sprintf ("ncols %s\n",        ncol(vmat)),      file=con)
    cat (sprintf ("nrows %s\n",        nrow(vmat)),      file=con)
    cat (sprintf ("xllcorner %s\n",    extent(r)@xmin),  file=con)
    cat (sprintf ("yllcorner %s\n",    extent(r)@ymin),  file=con)
    cat (sprintf ("cellsize %s\n",     res(r)[1]),       file=con)
    cat (sprintf ("NODATA_value %s\n", p$NA_VALUE),      file=con)
    for(e in 1:nrow(vmat)) cat(vmat[e,,drop=TRUE], "\n", file=con)
    close (con)
}
grd2tif <- function (i, o) {
    cmd <- sprintf("gdal_translate -a_srs EPSG:4612 %s %s", i, o)
    system(cmd)
}
    config <- read_yaml("config.yaml")
    target_dir <- purrr::pluck(config, "TARGET_DIR")
    output_dir <- purrr::pluck(config, "OUTPUT_DIR")
    parameters <- purrr::pluck(config, "RASTER_PARAMETER")
    ipaths <-
        list.files(target_dir, full.names=TRUE, pattern="xml$") %>%
        keep( ~ str_detect(.x, "DEM5A"))
    # xml to grd
    for (ipath in ipaths[1]) {
        rst <- convert_dem5a_to_raster(ipath, parameters)
        opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
        writeRasterGrd(rst, opath, parameters)
    }
    # grd to tiff
# + --------------------------------------------------------------------------- +
# 基盤地図情報5mメッシュをGeoTiff形式に変換する
# Rでgrdファイルに書き出した後に, gdal_translateでgeotiffファイルに変換
# + --------------------------------------------------------------------------- +
libs <- c ("rvest", "rgdal", "raster", "dplyr", "tidyr", "readr", "purrr", "stringr", "yaml")
for (lib in libs[!sapply(libs, require, character.only=TRUE)]) {
    install.packages(lib, repos="https://cran.ism.ac.jp/", depend=TRUE)
    library (lib)
}
convert_dem5a_to_raster <- function (ipath, p) {
    coverage  <-
        read_html(ipath, encoding="cp932") %>%
        html_nodes(xpath="//dem//coverage")
    boundedby <-
        coverage %>%
        html_nodes(xpath="//coverage//boundedby//envelope") %>%
        html_children %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        "names<-"(c("lower", "upper")) %>%
        lapply(setNames, c ("x", "y"))
    sp <-
        coverage %>%
        html_nodes(xpath="//coverage//coveragefunction//gridfunction//startpoint") %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        lapply(setNames, c ("x", "y")) %>%
        unlist
    tuplelist <-
        coverage %>%
        html_nodes(xpath="//coverage//rangeset//datablock//tuplelist") %>%
        html_text %>%
        read_csv(col_names=c("type", "val"), col_types="cd")
    vals <- tuplelist$val
    vals <- c (rep (p$NA_VALUE, length=sp["x"] + sp["y"] * p$MESH_SIZE_X), vals)
    vals <- c (vals, rep (p$NA_VALUE, length=p$MESH_SIZE_X * p$MESH_SIZE_Y - length(vals)))
    rst  <- raster(xmn=boundedby$lower["x"],
                   xmx=boundedby$upper["x"],
                   ymn=boundedby$lower["y"],
                   ymx=boundedby$upper["y"],
                   nrows=p$MESH_SIZE_Y,
                   ncols=p$MESH_SIZE_X,
                   crs=p$CRS)
    values(rst) <- vals
    rst[abs(rst - p$NA_VALUE) <= 1.] <- p$NA_VALUE
    rst
}
writeRasterGrd <- function (r, opath, p) {
    vmat <- matrix(values(r), nrow=p$MESH_SIZE_Y, ncol=p$MESH_SIZE_X, byrow=TRUE)
    con  <- file(opath, open="wb")
    cat (sprintf ("ncols %s\n",        ncol(vmat)),      file=con)
    cat (sprintf ("nrows %s\n",        nrow(vmat)),      file=con)
    cat (sprintf ("xllcorner %s\n",    extent(r)@xmin),  file=con)
    cat (sprintf ("yllcorner %s\n",    extent(r)@ymin),  file=con)
    cat (sprintf ("cellsize %s\n",     res(r)[1]),       file=con)
    cat (sprintf ("NODATA_value %s\n", p$NA_VALUE),      file=con)
    for(e in 1:nrow(vmat)) cat(vmat[e,,drop=TRUE], "\n", file=con)
    close (con)
}
grd2tif <- function (i, o) {
    cmd <- sprintf("gdal_translate -a_srs EPSG:4612 %s %s", i, o)
    system(cmd)
}
main <- function () {
    config <- read_yaml("config.yaml")
    target_dir <- purrr::pluck(config, "TARGET_DIR")
    output_dir <- purrr::pluck(config, "OUTPUT_DIR")
    parameters <- purrr::pluck(config, "RASTER_PARAMETER")
    ipaths <-
        list.files(target_dir, full.names=TRUE, pattern="xml$") %>%
        keep( ~ str_detect(.x, "DEM5A"))
    # xml to grd
    for (ipath in ipaths[1]) {
        rst <- convert_dem5a_to_raster(ipath, parameters)
        opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
        writeRasterGrd(rst, opath, parameters)
    }
    # grd to tiff
    grds <- list.files(output_dir, full.names=TRUE, pattern="grd$")
    tifs <- sub ("grd$", "tif", grds)
    # Map(grd2tif, grds, tifs)
    # system ('python gdal_merge.py -o merged.tif ./out/*.tif')
    # system ('gdalwarp -r bilinear -s_srs EPSG:4612 -t_srs EPSG:2450 merged.tif merged_2450.tif')
}
main ()
}
main <- function () {
    config <- read_yaml("config.yaml")
    target_dir <- purrr::pluck(config, "TARGET_DIR")
    output_dir <- purrr::pluck(config, "OUTPUT_DIR")
    parameters <- purrr::pluck(config, "RASTER_PARAMETER")
    ipaths <-
        list.files(target_dir, full.names=TRUE, pattern="xml$") %>%
        keep( ~ str_detect(.x, "DEM5A"))
    # xml to grd
    for (ipath in ipaths[1]) {
        rst <- convert_dem5a_to_raster(ipath, parameters)
        opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
        writeRasterGrd(rst, opath, parameters)
        browser()
    }
    # grd to tiff
    grds <- list.files(output_dir, full.names=TRUE, pattern="grd$")
    tifs <- sub ("grd$", "tif", grds)
    # Map(grd2tif, grds, tifs)
    # system ('python gdal_merge.py -o merged.tif ./out/*.tif')
    # system ('gdalwarp -r bilinear -s_srs EPSG:4612 -t_srs EPSG:2450 merged.tif merged_2450.tif')
}
main ()
}
main <- function () {
    config <- read_yaml("config.yaml")
    target_dir <- purrr::pluck(config, "TARGET_DIR")
    output_dir <- purrr::pluck(config, "OUTPUT_DIR")
    parameters <- purrr::pluck(config, "RASTER_PARAMETER")
    ipaths <-
        list.files(target_dir, full.names=TRUE, pattern="xml$") %>%
        keep( ~ str_detect(.x, "DEM5A"))
    # xml to grd
    for (ipath in ipaths[1]) {
        rst <- convert_dem5a_to_raster(ipath, parameters)
        opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
        writeRasterGrd(rst, opath, parameters)
        browser()
    }
    # grd to tiff
    grds <- list.files(output_dir, full.names=TRUE, pattern="grd$")
    tifs <- sub ("grd$", "tif", grds)
    # Map(grd2tif, grds, tifs)
    # system ('python gdal_merge.py -o merged.tif ./out/*.tif')
    # system ('gdalwarp -r bilinear -s_srs EPSG:4612 -t_srs EPSG:2450 merged.tif merged_2450.tif')
}
main ()
opath
n
getwd()
}
main <- function () {
    config <- read_yaml("config.yaml")
    target_dir <- purrr::pluck(config, "TARGET_DIR")
    output_dir <- purrr::pluck(config, "OUTPUT_DIR")
    parameters <- purrr::pluck(config, "RASTER_PARAMETER")
    ipaths <-
        list.files(target_dir, full.names=TRUE, pattern="xml$") %>%
        keep( ~ str_detect(.x, "DEM5A"))
    ## xml to grd
    for (ipath in ipaths[1]) {
        rst <- convert_dem5a_to_raster(ipath, parameters)
        opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
        writeRasterGrd(rst, opath, parameters)
        browser()
    }
    ## grd to tiff
    grds <- list.files(output_dir, full.names=TRUE, pattern="grd$")
    tifs <- sub ("grd$", "tif", grds)
    # Map(grd2tif, grds, tifs)
    # system ('python gdal_merge.py -o merged.tif ./out/*.tif')
    # system ('gdalwarp -r bilinear -s_srs EPSG:4612 -t_srs EPSG:2450 merged.tif merged_2450.tif')
}
main ()
rst
plot(rst)
n
n
getwd()
dir("out")
# + --------------------------------------------------------------------------- +
# 基盤地図情報5mメッシュをGeoTiff形式に変換する
# Rでgrdファイルに書き出した後に, gdal_translateでgeotiffファイルに変換
# + --------------------------------------------------------------------------- +
libs <- c ("rvest", "rgdal", "raster", "dplyr", "tidyr", "readr", "purrr", "stringr", "yaml")
for (lib in libs[!sapply(libs, require, character.only=TRUE)]) {
    install.packages(lib, repos="https://cran.ism.ac.jp/", depend=TRUE)
    library (lib)
}
convert_dem5a_to_raster <- function (ipath, p) {
    coverage  <-
        read_html(ipath, encoding="cp932") %>%
        html_nodes(xpath="//dem//coverage")
    boundedby <-
        coverage %>%
        html_nodes(xpath="//coverage//boundedby//envelope") %>%
        html_children %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        "names<-"(c("lower", "upper")) %>%
        lapply(setNames, c ("x", "y"))
    sp <-
        coverage %>%
        html_nodes(xpath="//coverage//coveragefunction//gridfunction//startpoint") %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        lapply(setNames, c ("x", "y")) %>%
        unlist
    tuplelist <-
        coverage %>%
        html_nodes(xpath="//coverage//rangeset//datablock//tuplelist") %>%
        html_text %>%
        read_csv(col_names=c("type", "val"), col_types="cd")
    vals <- tuplelist$val
    vals <- c (rep (p$NA_VALUE, length=sp["x"] + sp["y"] * p$MESH_SIZE_X), vals)
    vals <- c (vals, rep (p$NA_VALUE, length=p$MESH_SIZE_X * p$MESH_SIZE_Y - length(vals)))
    rst  <- raster(xmn=boundedby$lower["x"],
                   xmx=boundedby$upper["x"],
                   ymn=boundedby$lower["y"],
                   ymx=boundedby$upper["y"],
                   nrows=p$MESH_SIZE_Y,
                   ncols=p$MESH_SIZE_X,
                   crs=p$CRS)
    values(rst) <- vals
    rst[abs(rst - p$NA_VALUE) <= 1.] <- p$NA_VALUE
    rst
}
writeRasterGrd <- function (r, opath, p) {
    vmat <- matrix(values(r), nrow=p$MESH_SIZE_Y, ncol=p$MESH_SIZE_X, byrow=TRUE)
    con  <- file(opath, open="wb")
    cat (sprintf ("ncols %s\n",        ncol(vmat)),      file=con)
    cat (sprintf ("nrows %s\n",        nrow(vmat)),      file=con)
    cat (sprintf ("xllcorner %s\n",    extent(r)@xmin),  file=con)
    cat (sprintf ("yllcorner %s\n",    extent(r)@ymin),  file=con)
    cat (sprintf ("cellsize %s\n",     res(r)[1]),       file=con)
    cat (sprintf ("NODATA_value %s\n", p$NA_VALUE),      file=con)
    for(e in 1:nrow(vmat)) cat(vmat[e,,drop=TRUE], "\n", file=con)
    close (con)
}
grd2tif <- function (i, o) {
    cmd <- sprintf("gdal_translate -a_srs EPSG:4612 %s %s", i, o)
    system(cmd)
}
main <- function () {
    config <- read_yaml("config.yaml")
    target_dir <- purrr::pluck(config, "TARGET_DIR")
    output_dir <- purrr::pluck(config, "OUTPUT_DIR")
    parameters <- purrr::pluck(config, "RASTER_PARAMETER")
    ipaths <-
        list.files(target_dir, full.names=TRUE, pattern="xml$") %>%
        keep( ~ str_detect(.x, "DEM5A"))
    ## xml to grd
    for (ipath in ipaths) {
        rst <- convert_dem5a_to_raster(ipath, parameters)
        opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
        writeRasterGrd(rst, opath, parameters)
    }
    ## grd to tiff
    # grds <- list.files(output_dir, full.names=TRUE, pattern="grd$")
    # tifs <- sub ("grd$", "tif", grds)
    # Map(grd2tif, grds, tifs)
    # system ('python gdal_merge.py -o merged.tif ./out/*.tif')
    # system ('gdalwarp -r bilinear -s_srs EPSG:4612 -t_srs EPSG:2450 merged.tif merged_2450.tif')
}
main ()
# + --------------------------------------------------------------------------- +
# 基盤地図情報5mメッシュをGeoTiff形式に変換する
# Rでgrdファイルに書き出した後に, gdal_translateでgeotiffファイルに変換
# + --------------------------------------------------------------------------- +
libs <- c ("rvest", "rgdal", "raster", "dplyr", "tidyr", "readr", "purrr", "stringr", "yaml")
for (lib in libs[!sapply(libs, require, character.only=TRUE)]) {
    install.packages(lib, repos="https://cran.ism.ac.jp/", depend=TRUE)
    library (lib)
}
convert_dem5a_to_raster <- function (ipath, p) {
    coverage  <-
        read_html(ipath, encoding="cp932") %>%
        html_nodes(xpath="//dem//coverage")
    boundedby <-
        coverage %>%
        html_nodes(xpath="//coverage//boundedby//envelope") %>%
        html_children %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        "names<-"(c("lower", "upper")) %>%
        lapply(setNames, c ("y", "x"))
    sp <-
        coverage %>%
        html_nodes(xpath="//coverage//coveragefunction//gridfunction//startpoint") %>%
        html_text %>%
        str_split(" ") %>%
        lapply(type.convert) %>%
        lapply(setNames, c ("x", "y")) %>%
        unlist
    tuplelist <-
        coverage %>%
        html_nodes(xpath="//coverage//rangeset//datablock//tuplelist") %>%
        html_text %>%
        read_csv(col_names=c("type", "val"), col_types="cd")
    vals <- tuplelist$val
    vals <- c (rep (p$NA_VALUE, length=sp["x"] + sp["y"] * p$MESH_SIZE_X), vals)
    vals <- c (vals, rep (p$NA_VALUE, length=p$MESH_SIZE_X * p$MESH_SIZE_Y - length(vals)))
    rst  <- raster(xmn=boundedby$lower["x"],
                   xmx=boundedby$upper["x"],
                   ymn=boundedby$lower["y"],
                   ymx=boundedby$upper["y"],
                   nrows=p$MESH_SIZE_Y,
                   ncols=p$MESH_SIZE_X,
                   crs=p$CRS)
    values(rst) <- vals
    rst[abs(rst - p$NA_VALUE) <= 1.] <- p$NA_VALUE
    rst
}
writeRasterGrd <- function (r, opath, p) {
    vmat <- matrix(values(r), nrow=p$MESH_SIZE_Y, ncol=p$MESH_SIZE_X, byrow=TRUE)
    con  <- file(opath, open="wb")
    cat (sprintf ("ncols %s\n",        ncol(vmat)),      file=con)
    cat (sprintf ("nrows %s\n",        nrow(vmat)),      file=con)
    cat (sprintf ("xllcorner %s\n",    extent(r)@xmin),  file=con)
    cat (sprintf ("yllcorner %s\n",    extent(r)@ymin),  file=con)
    cat (sprintf ("cellsize %s\n",     res(r)[1]),       file=con)
    cat (sprintf ("NODATA_value %s\n", p$NA_VALUE),      file=con)
    for(e in 1:nrow(vmat)) cat(vmat[e,,drop=TRUE], "\n", file=con)
    close (con)
}
grd2tif <- function (i, o) {
    cmd <- sprintf("gdal_translate -a_srs EPSG:4612 %s %s", i, o)
    system(cmd)
}
main <- function () {
    config <- read_yaml("config.yaml")
    target_dir <- purrr::pluck(config, "TARGET_DIR")
    output_dir <- purrr::pluck(config, "OUTPUT_DIR")
    parameters <- purrr::pluck(config, "RASTER_PARAMETER")
    ipaths <-
        list.files(target_dir, full.names=TRUE, pattern="xml$") %>%
        keep( ~ str_detect(.x, "DEM5A"))
    ## xml to grd
    for (ipath in ipaths) {
        rst <- convert_dem5a_to_raster(ipath, parameters)
        opath <- ipath %>% basename() %>% sub("xml$", "grd", .) %>% file.path(output_dir, .)
        writeRasterGrd(rst, opath, parameters)
    }
    ## grd to tiff
    # grds <- list.files(output_dir, full.names=TRUE, pattern="grd$")
    # tifs <- sub ("grd$", "tif", grds)
    # Map(grd2tif, grds, tifs)
    # system ('python gdal_merge.py -o merged.tif ./out/*.tif')
    # system ('gdalwarp -r bilinear -s_srs EPSG:4612 -t_srs EPSG:2450 merged.tif merged_2450.tif')
}
main ()
bash grd2tif.bash
q()
source("convert_dem5a_to_raster.r", encoding="UTF-8")
dir
dir()
gmls <- list.files("FG-GML-5638-04-DEM5A", full.names=TRUE)
gmls
p <- read_yaml("config.yaml")
p
convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER)
a <- read_hmlt(gmls[1], encoding ="cp932")
a <- read_html(gmls[1], encoding ="cp932")
a
b <- a %>% html_nodes("//dem//low")
b <- a %>% html_nodes(xpath="//dem//low")
b
b %>%     html_text() %>%
    str_split(" ", simplify = TRUE, n = 2) %>%
    parse_integer() %>%
    set_names(c("x", "y"))
c <- b %>%     html_text() %>%
    str_split(" ", simplify = TRUE, n = 2) %>%
    parse_integer() %>%
    set_names(c("x", "y"))
c$x
c["x"]
source("convert_dem5a_to_raster.r", encoding="utf-8")
convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER)
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER))
raster
?raster
source("convert_dem5a_to_raster.r", encoding="utf-8")
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER))
source("convert_dem5a_to_raster.r", encoding="utf-8")
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER))
plot.raster
methods("plot"
)
getMethos
getMethdos
getS3Methdos
source("convert_dem5a_to_raster.r", encoding="utf-8")
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER))
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER$CRS))
source("convert_dem5a_to_raster.r", encoding="utf-8")
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER$CRS))
k <- (convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER$CRS))
k
raster
raster()
values(k)
source("convert_dem5a_to_raster.r", encoding="utf-8")
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER$CRS))
plot(convert_dem5a_to_raster(gmls[1], p$RASTER_PARAMETER$CRS, p$RASTER_PARAMETER$NA_VALUE))
plot(convert_dem5a_to_raster(gmls[10], p$RASTER_PARAMETER$CRS, p$RASTER_PARAMETER$NA_VALUE))
k
res(k)
extent(k)
k
dim(k)
source("main.r", encoding="UTF-8")
sprintf("ncols %s", 10L)
source("convert_dem5a_to_raster.r", encoding="UTF08")
source("convert_dem5a_to_raster.r", encoding="UTF-8")
source("convert_dem5a_to_raster.r", encoding="UTF-8")
source("convert_dem5a_to_raster.r", encoding="UTF08")
source("main.r", encoding="UTF-8")
q()
source("main.r", encoding="utf-8")
q()
a <- list.files("FG-GML-5638-04-DEM5A", full.names=TRUE)
a
source("convert_dem5a_to_raster.r", encoding="UTF-8")
a
a <- read_html(a[1], encoding="cp932")
a
a %>% html_nodes(xpath="//dem//gridenvelop")
a %>% html_nodes(xpath="//dem//coverage")
a %>% html_nodes(xpath="//dem//gridenvelope")
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text()
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text() %>% str_split(" ")
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text() %>% str_split(" ") %>% set_names(c("low", "high"))
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text() %>% str_split(" ") %>% set_names(c("low", "high")) %>% lapply(set_names, c("x", "y"))
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text() %>% str_split(" ") %>% set_names(c("low", "high")) %>% lapply(set_names, c("x", "y")) -> b
b$low["x"]
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text() %>% str_split(" ") %>% set_names(c("low", "high")) %>% lapply(set_names, c("x", "y")) %>% lapply(parse_integer)
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text() %>% str_split(" ") %>% set_names(c("low", "high")) %>% lapply(set_names, c("x", "y")) %>% lapply(parse_integer) -> b
b
b$low["x"]
a %>% html_nodes(xpath="//dem//gridenvelope") %>% html_children %>% html_text() %>% str_split(" ") %>% set_names(c("low", "high")) %>% lapply(parse_integer) %>% lapply(set_names, c("x", "y"))  -> b
b
b$low["x"]
q()
source("main.r", encoding="UTF-8")
source("main.r", encoding="UTF-8")
source("main.r", encoding="UTF-8")
setNames
set_names
source("main.r", encoding="UTF-8")
q()
